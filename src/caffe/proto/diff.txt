64,68d63
< message TopologyMaskFillerParameter {
<   required string type = 1;
<   required float spread = 2;
< }
< 
367d361
<   optional ConvolutionTopologyParameter convolution_topology_param = 200;
399d392
<   optional TopologyParameter topology_param = 160;
527a521,524
>   // Factor used to dilate the kernel, (implicitly) zero-filling the resulting
>   // holes. (Kernel dilation is sometimes referred to by its use in the
>   // algorithme Ã  trous from Holschneider et al. 1987.)
>   repeated uint32 dilation = 18; // The dilation; defaults to 1
568,616d564
< message ConvolutionTopologyParameter {
<     optional uint32 num_output = 1; // The number of outputs for the layer
<     optional bool bias_term = 2 [default = true]; // whether to have bias terms
<     
<     // Pad, kernel size, and stride are all given as a single value for equal
<     // dimensions in all spatial dimensions, or once per spatial dimension.
<     repeated uint32 pad = 3; // The padding size; defaults to 0
<     repeated uint32 kernel_size = 4; // The kernel size
<     repeated uint32 stride = 6; // The stride; defaults to 1
<     
<     // For 2D convolution only, the *_h and *_w versions may also be used to
<     // specify both spatial dimensions.
<     optional uint32 pad_h = 9 [default = 0]; // The padding height (2D only)
<     optional uint32 pad_w = 10 [default = 0]; // The padding width (2D only)
<     optional uint32 kernel_h = 11; // The kernel height (2D only)
<     optional uint32 kernel_w = 12; // The kernel width (2D only)
<     optional uint32 stride_h = 13; // The stride height (2D only)
<     optional uint32 stride_w = 14; // The stride width (2D only)
<     
<     optional uint32 group = 5 [default = 1]; // The group size for group conv
<     
<     optional FillerParameter weight_filler = 7; // The filler for the weight
<     optional FillerParameter bias_filler = 8; // The filler for the bias
<     enum Engine {
<         DEFAULT = 0;
<         CAFFE = 1;
<         CUDNN = 2;
<     }
<     optional Engine engine = 15 [default = DEFAULT];
<     
<     // The axis to interpret as "channels" when performing convolution.
<     // Preceding dimensions are treated as independent inputs;
<     // succeeding dimensions are treated as "spatial".
<     // With (N, C, H, W) inputs, and axis == 1 (the default), we perform
<     // N independent 2D convolutions, sliding C-channel (or (C/g)-channels, for
<     // groups g>1) filters across the spatial axes (H, W) of the input.
<     // With (N, C, D, H, W) inputs, and axis == 1, we perform
<     // N independent 3D convolutions, sliding (C/g)-channels
<     // filters across the spatial axes (D, H, W) of the input.
<     optional int32 axis = 16 [default = 1];
<     
<     // Whether to force use of the general ND convolution, even if a specific
<     // implementation for blobs of the appropriate number of spatial dimensions
<     // is available. (Currently, there is only a 2D-specific convolution
<     // implementation; for input blobs with num_axes != 2, this option is
<     // ignored and the ND implementation will be used.)
<     optional bool force_nd_im2col = 17 [default = false];
< }
< 
1062,1074d1009
< }
< 
< message TopologyParameter {
<   optional uint32 num_output = 1; // The number of outputs for the layer
<   optional bool bias_term = 2 [default = true]; // whether to have bias terms
<   optional FillerParameter weight_filler = 3; // The filler for the weight
<   optional FillerParameter bias_filler = 4; // The filler for the bias
<   required TopologyMaskFillerParameter mask_filler = 6; // The filler for the mask
< 
<   // The first axis to be lumped into a single inner product computation;
<   // all preceding axes are retained in the output.
<   // May be negative to index from the end (e.g., -1 for the last axis).
<   optional int32 axis = 5 [default = 1];
